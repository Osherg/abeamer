"use strict";
// uuid: 81ec129f-b642-498a-8b8b-f719c1d3bf21

// ------------------------------------------------------------------------
// Copyright (c) 2018 Alexandre Bento Freire. All rights reserved.
// Licensed under the MIT License+uuid License. See License.txt for details
// ------------------------------------------------------------------------

/** @module end-user | The lines bellow convey information for the end-user */

/**
 *
 * ## Description
 *
 * This module provides utility functions, mostly to be used by plugin creators
 * or developers.
 */
namespace ABeamer {

  // The following section contains data for the end-user
  // generated by `gulp build-definition-files`
  // -------------------------------
  // #export-section-start: release

  export enum RoundFuncName {
    none,
    round,
    ceil,
    floor,
    downRound,
  }


  export type RoundFunc = (v: number) => number;

  export type RoundHandlerFunc = string | RoundFuncName | RoundFunc;

  // #export-section-end: release
  // -------------------------------

  // ------------------------------------------------------------------------
  //                               Implementation
  // ------------------------------------------------------------------------

  export function parseRoundFunc(handler: RoundHandlerFunc): RoundFunc {

    if (handler === undefined) { return undefined; }

    if (typeof handler === 'string') {
      handler = RoundFuncName[handler];
    } else if (typeof handler === 'function') {
      return handler;
    }

    switch (handler) {
      case RoundFuncName.round: return Math.round;
      case RoundFuncName.downRound: return downRound;
      case RoundFuncName.ceil: return Math.ceil;
      case RoundFuncName.floor: return Math.floor;
    }
    return undefined;
  }


  export function _applyRoundFunc(values: number[], f: RoundFunc): number[] {
    return f ? values.map(value => f(value)) : values;
  }


  export function parseHandler<T, TO>(handler: T, defaultHandler: T,
    mapper: any, args: ABeamerArgs): TO {

    if (handler === undefined) {
      if (!defaultHandler) { return undefined; }
      handler = defaultHandler;
    }

    if (typeof handler === 'string') {
      const exprValue = ifExprCalc(handler, args);
      if (exprValue !== undefined) {
        handler = exprValue as any;
      }
    }

    if (typeof handler === 'function') {
      return (handler as any)(args) as TO;
    } else {
      return handler as any;
    }
  }


  export function parseEnum<T>(value: T | string, mapper: any,
    defValue?: T): T {

    return value === undefined ? defValue :
      (typeof value === 'string' ? mapper[value] : value);
  }
}
