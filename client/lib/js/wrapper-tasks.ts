"use strict";
// uuid: 57f31321-69a9-4170-96a1-6baac731403b

// ------------------------------------------------------------------------
// Copyright (c) 2018 Alexandre Bento Freire. All rights reserved.
// Licensed under the MIT License+uuid License. See License.txt for details
// ------------------------------------------------------------------------

// Implements a list of built-in wrapper Tasks

/** @module end-user | The lines bellow convey information for the end-user */

/**
 * ## Description
 *
 * A wrapper task calls a story or scene method, allowing for a story
 * to be loaded from JSON file or to be [](teleported).
 *
 * ABeamer has the following built-in wrapper tasks:
 *
 * - `scene-transition` - setup a scene transition.
 *
 * - `add-stills` - adds stills to the scene pipeline.
 *
 * - `add-flyover` - adds a flyover to the story.
 *
 * - `add-vars` - adds variables to be used by expressions.
 */
namespace ABeamer {

  // #generate-group-section
  // ------------------------------------------------------------------------
  //                               Text Tasks
  // ------------------------------------------------------------------------

  // The following section contains data for the end-user
  // generated by `gulp build-definition-files`
  // -------------------------------
  // #export-section-start: release

  export type WrapperTaskName =
    /** @see #SceneTransitionTaskParams */
    | 'scene-transition'
    /** @see #AddStillsTaskParams */
    | 'add-stills'
    /** @see #AddFlyoverTaskParams */
    | 'add-flyover'
    /** @see #AddVarsTaskParams */
    | 'add-vars'
    ;


  export type WrapperTaskParams =
    | SceneTransitionTaskParams
    | AddStillsTaskParams
    | AddFlyoverTaskParams
    | AddVarsTaskParams
    ;


  export interface SceneTransitionTaskParams extends AnyParams {
    handler?: TransitionHandler;
    duration?: TimeHandler;
  }


  export interface AddStillsTaskParams extends AnyParams {
    duration: TimeHandler;
  }


  export interface AddFlyoverTaskParams extends AnyParams {
    handler: FlyoverHandler;
    params?: FlyoverParams;
  }


  export interface AddVarsTaskParams extends AnyParams {
    vars: { [varName: string]: string | number };
  }

  // #export-section-end: release
  // -------------------------------

  // ------------------------------------------------------------------------
  //                               SceneTransition Task
  // ------------------------------------------------------------------------

  _taskFunctions['scene-transition'] = _SceneTransitionTask;

  /** Implements the Scene Transition Task */
  function _SceneTransitionTask(anime: Animation, wkTask: WorkTask,
    params: SceneTransitionTaskParams,
    stage: uint, args?: ABeamerArgs): TaskResult {

    switch (stage) {
      case TS_TELEPORT:
        let handler = params.handler;

        if (typeof handler === 'number') {
          handler = StdTransitions[handler];
        } else {
          throwIfI8n(typeof handler === 'function', Msgs.NoCode);
        }

        params.handler = handler;
        return TR_EXIT;

      case TS_INIT:
        args.scene.transition = {
          handler: params.handler,
          duration: params.duration,
        };
        return TR_EXIT;
    }
  }

  // ------------------------------------------------------------------------
  //                               AddStills
  // ------------------------------------------------------------------------

  _taskFunctions['add-stills'] = _addStillsTask;

  /** Implements the Add Stills Task */
  function _addStillsTask(anime: Animation, wkTask: WorkTask,
    params: AddStillsTaskParams,
    stage: uint, args?: ABeamerArgs): TaskResult {

    switch (stage) {
      case TS_INIT:
        args.scene.addStills(params.duration);
        return TR_EXIT;
    }
  }

  // ------------------------------------------------------------------------
  //                               AddFlyover
  // ------------------------------------------------------------------------

  _taskFunctions['add-flyover'] = _addFlyover;

  /** Implements the Add Flyover Task */
  function _addFlyover(anime: Animation, wkTask: WorkTask,
    params: AddFlyoverTaskParams, stage: uint, args?: ABeamerArgs): TaskResult {

    switch (stage) {
      case TS_INIT:
        args.story.addFlyover(params.handler, params.params);
        return TR_EXIT;
    }
  }

  // ------------------------------------------------------------------------
  //                               AddVars
  // ------------------------------------------------------------------------

  _taskFunctions['add-vars'] = _addVarsTask;

  /** Implements the Add Vars Task */
  function _addVarsTask(anime: Animation, wkTask: WorkTask,
    params: AddVarsTaskParams, stage: uint, args?: ABeamerArgs): TaskResult {

    switch (stage) {
      case TS_INIT:
        const vars = params.vars || {};
        Object.keys(vars).forEach(varName => {
          const varParts = varName.split('.');
          let argsPointer = args.vars as AnyParams;
          let part = varParts.shift();
          while (varParts.length) {
            argsPointer[part] = argsPointer[part] || {};
            argsPointer = argsPointer[part];
            part = varParts.shift();
          }
          argsPointer[part] = vars[varName];
        });
        return TR_EXIT;
    }
  }
}
