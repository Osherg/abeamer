"use strict";
// uuid: e8f361d2-c6fe-4649-9fde-fe6f24fa043a

// ------------------------------------------------------------------------
// Copyright (c) 2018 Alexandre Bento Freire. All rights reserved.
// Licensed under the MIT License+uuid License. See License.txt for details
// ------------------------------------------------------------------------

/** @module end-user | The lines bellow convey information for the end-user */

/**
 * ## Description
 *
 * An **expression** is a textual value that starts with `=`.
 * Expressions unlike Code Handlers can be defined on the `.json`
 * config file and support teleporting.
 *
 * ABeamer supports:
 *
 * - binary operators: `+`, `-`, `*`, `/`, `%` (modulus).
 *
 * - equality and comparison operators: `==`, `!=`, `<`, `>`, `<=`, `>=`.
 *      These operators transform the 2 numerical values into 0 (false) or 1 (true).
 *
 * - parenthesis: `(`, `)`.
 * - functions: @see functions
 * - textual values: delimited by single quotes.
 *     the following character strings have a special meaning:
 *       - `\'` - defines a single quote
 *       - `\n' - defines new line
 * - numerical values.
 * - variables.
 *
 * ## Built-in Variables
 *
 * ABeamer has the following built-in variables:
 *
 * `e` - mathematical constant 'e'.
 * `pi` - mathematical constant 'pi'.
 * `deg2rad` - `=pi/180`.
 * `rad2deg` - `=180/pi`.
 *
 * `fps` - frames per second.
 * `frameWidth` - frame output width = generated file image width.
 * `frameHeight` - frame output height = generated file image height.
 *
 *  `isTeleporting` - Is True, if it's teleporting.
 *  `defaultDuration` - Value used if the duration is not set on the `addAnimation`.
 *      Modify this value, via task `add-vars` to set a different default duration.
 *
 *  `v0` - Computed Numerical `valueStart`.
 *  `v1` - Computed Numerical `value`.
 *  `vd` - Computed Numerical difference `value` - `valueStart`.
 *  `vt` - Computed Numerical value injected to the easing function.
 *  `vot` - Computed Numerical value injected to the oscillator function.
 *  `vpt` - Computed Numerical value injected to the path function.
 *  `t` - `t` used to interpolate an easing, oscillator or path via expression.
 * ## Examples
 *
 * @example = 'A' + 'Beamer'
 * @example = round(12.4 + ceil(50.5) / 2 * (60 % 4))
 * @example = cos(60*deg2rad) * random()
 * @example = iff(fps < 20, 'too few frames', 'lots of frames')
 */
namespace ABeamer {

  // #generate-group-section
  // ------------------------------------------------------------------------
  //                               Expressions
  // ------------------------------------------------------------------------

  // The following section contains data for the end-user
  // generated by `gulp build-definition-files`
  // -------------------------------
  // #export-section-start: release


  export interface Vars {
    e: number;
    pi: number;
    /** =pi/180 */
    deg2rad: number;
    /** =180/pi */
    rad2deg: number;

    /** Frames per second. */
    fps?: uint;
    /** Frame output width = generated file image width. */
    frameWidth?: uint;
    /** Frame output height = generated file image height. */
    frameHeight?: uint;

    /** Is True, if it's teleporting. */
    isTeleporting?: boolean;
    /**
     * Value used if the duration is not set on the `addAnimation`.
     * Modify this value, via task `add-vars` to set a different default duration.
     */
    defaultDuration?: string;

    /** Element index of the active adaptor */
    elIndex?: uint;

    /** Number of elements inside defined by the active adaptor */
    elCount?: uint;

    /** Computed Numerical `valueStart`. */
    v0?: number;
    /** Computed Numerical `value`. */
    v1?: number;
    /** Computed Numerical difference `value` - `valueStart`. */
    vd?: number;
    /** Computed Numerical value injected to the easing function. */
    vt?: number;
    /** Computed Numerical value injected to the oscillator function. */
    vot?: number;
    /** Computed Numerical value injected to the path function. */
    vpt?: number;
    /** `t` used to interpolate an easing, oscillator or path via expression. */
    t?: number;

    [name: string]: number | string | boolean;
  }


  export const enum ExprType {
    NotExpr,
    CalcOnce,
    CalcMany,
  }


  export type ExprResult = string | number;

  export type ExprString = string;

  // #export-section-end: release
  // -------------------------------

  // ------------------------------------------------------------------------
  //                               Implementation
  // ------------------------------------------------------------------------

  /** Initializes the default global expression variables */
  export const _vars: Vars = {
    e: Math.E,
    pi: Math.PI,
    deg2rad: Math.PI / 180,
    rad2deg: 180 / Math.PI,
  };


  /**
   * Defines the code range for characters.
   * By default only includes the latin alphabet
   * but if functions are mapped into another characters systems,
   * it must add to this list the extra character code ranges.
   *
   */
  export const CharRanges = [
    ['A'.charCodeAt(0), 'Z'.charCodeAt(0)],
    ['a'.charCodeAt(0), 'z'.charCodeAt(0)],
  ];


  /**
   * Utility function to test if `ch` is a character.
   * It might include non-latin characters. It depends on `CharRanges`.
   * Used by developers and plugin creators.
   *
   */
  export function isCharacter(ch: string): boolean {
    const codePoint = ch.codePointAt(0);
    return CharRanges.findIndex(rg => codePoint >= rg[0] && codePoint <= rg[1]) !== -1;
  }


  /**
   * Utility function to test if it's a digit.
   * Used by developers and plugin creators.
   *
   */
  export function isDigit(ch: string): boolean {
    return ch >= '0' && ch <= '9';
  }


  /**
   * Utility function to test if it's a digit or character.
   * It might include non-latin characters. It depends on `CharRanges`.
   * Used by developers and plugin creators.
   *
   */
  export function isCharacterOrNum(ch: string): boolean {
    return isDigit(ch) || isCharacter(ch);
  }


  /**
   * Tests if `text` is an expression.
   * Used by developers and plugin creators.
   */
  export function isExpression(text: string): boolean {
    return text !== undefined && text[0] === '=';
  }

  // ------------------------------------------------------------------------
  //                               ExprParser
  // ------------------------------------------------------------------------

  const enum TokenType {
    None,
    Function,
    Comma,
    ParamOpen,
    ParamClose,
    Value,
    Plus,
    Minus,
    Multiply,
    Divide,
    Mod,
    Equal,
    Different,
    Lesser,
    Greater,
    LessEqual,
    GreaterEqual,
  }


  const enum TokenClass {
    None,
    Function,
    Value,
    ParamOpen,
    ParamClose,
    Unary,
    Binary,
    Comma,
  }


  enum TokenType2Str {
    '(' = TokenType.ParamOpen,
    ')' = TokenType.ParamClose,
    '+' = TokenType.Plus,
    '-' = TokenType.Minus,
    '*' = TokenType.Multiply,
    '/' = TokenType.Divide,
    '%' = TokenType.Mod,
    ',' = TokenType.Comma,
    '==' = TokenType.Equal,
    '!=' = TokenType.Different,
    '<' = TokenType.Lesser,
    '>' = TokenType.Greater,
    '<=' = TokenType.LessEqual,
    '>=' = TokenType.GreaterEqual,
  }


  interface Token extends ExFuncParam {
    tkType?: TokenType;
    tkClass?: TokenClass;
    canBinOp?: boolean;
    funcParams?: ExprFuncParams;
  }


  const opPriority: uint[] = [
    0,  // None,
    19, // Function,
    19, // Comma,
    20, // ParamOpen,
    20, // ParamClose,
    1,  // Value,
    13,  // Plus,
    13,  // Minus,
    14,  // Multiply,
    14,  // Divide,
    14,  // Mod,
    10,  // Equal,
    10,  // Different,
    11,  // Lesser,
    11,  // Greater,
    11,  // LessEqual,
    11,  // GreaterEqual,
  ];


  const Type2Class: TokenClass[] = [
    TokenClass.None,
    TokenClass.Function,
    TokenClass.Comma,
    TokenClass.ParamOpen,
    TokenClass.ParamClose,
    TokenClass.Value,
    TokenClass.Unary,
    TokenClass.Unary,
    TokenClass.Binary,
    TokenClass.Binary,
    TokenClass.Binary,
    TokenClass.Binary,
    TokenClass.Binary,
    TokenClass.Binary,
    TokenClass.Binary,
    TokenClass.Binary,
    TokenClass.Binary,
  ];

  // ------------------------------------------------------------------------
  //                               parser
  // ------------------------------------------------------------------------

  interface ParseParams extends ExFuncReq {
    expr: string;
    pos: uint;
    token?: Token;
  }


  function parser(p: ParseParams, checkSign: boolean) {

    let startPos;

    function setToken(aType: TokenType) {
      p.token.sValue = expr.substring(startPos, pos);
      p.token.tkType = aType;
      p.token.tkClass = Type2Class[aType];
    }

    const expr = p.expr;
    let pos = p.pos;
    p.token.tkClass = TokenClass.None;

    do {
      let ch = expr[pos];

      while (ch === ' ') {
        ch = expr[++pos];
      }
      startPos = pos;

      if (ch === undefined) { break; }

      // vars & functions
      if (isCharacter(ch)) {
        do {
          const nextCh = expr[++pos];
          if (!nextCh || !isCharacterOrNum(nextCh)) {
            break;
          }
        } while (true);

        if (expr[pos] === '(') {
          setToken(TokenType.Function);
          pos++;
        } else {
          setToken(TokenType.Value);
          const varName = p.token.sValue;
          const varValue = p.args.vars[varName];
          const varTypeOf = typeof varValue;
          if (varValue === undefined) {
            err(p, `Unknown variable ${varName}`);
          }
          if (varTypeOf === 'string') {
            p.token.paType = ExFuncParamType.String;
            p.token.sValue = varValue as string;
          } else if (varTypeOf === 'number') {
            p.token.paType = ExFuncParamType.Number;
            p.token.numValue = varValue as number;
            p.token.sValue = undefined;
          } else if (varTypeOf === 'boolean') {
            p.token.paType = ExFuncParamType.Number;
            p.token.numValue = (varValue as boolean) ? 1 : 0;
            p.token.sValue = undefined;
          } else {
            err(p, `Unsupported type of ${varName}`);
          }
        }
        break;
      }

      // number sign
      if (checkSign && ((ch === '-' || ch === '+') && isDigit(expr[pos + 1]))) {
        ch = expr[++pos];
      }

      // numbers
      if (isDigit(ch)) {
        do {
          ch = expr[++pos];
        } while (ch && (isDigit(ch) || ch === '.'));
        setToken(TokenType.Value);
        p.token.paType = ExFuncParamType.Number;
        p.token.numValue = parseFloat(p.token.sValue);
        p.token.sValue = undefined;
        break;
      }

      // strings
      if (ch === "'") {
        let prevCh: string;
        do {
          prevCh = ch;
          ch = expr[++pos];
        } while ((ch !== "'" || prevCh === '\\') && ch !== undefined);
        startPos++;
        setToken(TokenType.Value);
        p.token.sValue = p.token.sValue.replace(/\\([n'])/g, (all, meta) => {
          switch (meta) {
            case 'n': return '\n';
            case "'": return "'";
          }
        });
        p.token.paType = ExFuncParamType.String;
        pos++;
        break;
      }

      // equality and comparison
      if ('=!<>'.indexOf(ch) !== -1 && expr[pos + 1] === '=') {
        ch = ch + '=';
        pos++;
      }

      // symbols
      const type = TokenType2Str[ch] || TokenType.None;
      if (type === TokenType.None) {
        err(p, `Unknown token ${ch} in position ${pos}`, p.token);
      }
      pos++;
      setToken(type);
      break;
    } while (true);

    const tkClass = p.token.tkClass;
    p.pos = pos;
    // @ts-ignore   TypeScript bug :-(
    p.token.canBinOp = tkClass === TokenClass.Unary || tkClass === TokenClass.Binary;
    return tkClass;
  }

  // ------------------------------------------------------------------------
  //                               Execute Expression Function
  // ------------------------------------------------------------------------

  function _execExprFunction(p: ParseParams, funcToken: Token): Token {

    const funcName = funcToken.sValue;
    const func = _exFunctions[funcName];
    if (!func) {
      err(p, `Unknown function: ${funcName}`, funcToken);
    }

    const res: Token = {
      canBinOp: false,
      tkClass: TokenClass.Value,
      tkType: TokenType.Value,
    };

    p.res = res;
    p.token = funcToken;
    func(funcToken.funcParams, p);
    return res;
  }

  // ------------------------------------------------------------------------
  //                               State Machine
  // ------------------------------------------------------------------------

  function _stateMachine(p: ParseParams): ExprResult {

    const enum States {
      IdAndUnary,
      NoUnary,
      Binary,
    }

    const stack: Token[] = [];
    let state = States.IdAndUnary;
    let token: Token;
    let op: Token;

    /** stack.length - 1 */
    let stackLast = -1;

    /**  startPoints[startPoints.length-1] */
    let startPoint: uint = 0;

    /** list of indexes to the stack element after for each 'func', '(' and ',' */
    const startPoints: uint[] = [];

    p.req = p;

    function push(): void {
      stack.push(token);
      stackLast++;
    }

    function pop(): Token {
      const tk = stack[stackLast];
      stack.length = stackLast;
      stackLast--;
      return tk;
    }

    function calcStackLeft(): void {
      // startPoint = 0;
      while (stackLast > 1 && stackLast > startPoint + 1) {
        op = stack[startPoint + 1];
        if (!op.canBinOp) {
          break;
        }
        const t1 = stack[startPoint];
        const t2 = stack[startPoint + 2];
        _calcBinary(p, op, t1, t2);
        stack.splice(startPoint + 1, 2);
        stackLast -= 2;
      }
    }

    function calcStackRight(): void {
      while (stackLast > 2) {
        op = stack[stackLast - 1];
        if (!op.canBinOp) {
          break;
        }
        const t1 = stack[stackLast - 2];
        const t2 = stack[stackLast];
        const prevOp = stack[stackLast - 3];
        if (_comparePriority(op, prevOp)) {
          _calcBinary(p, op, t1, t2);
          stack.length = stackLast - 1;
          stackLast -= 2;
        } else {
          break;
        }
      }
    }

    function onCloseParamOrFunc(): void {
      calcStackLeft();
      if (startPoint !== stackLast) {
        err(p, '', token);
      }
      token = stack.pop();
      stackLast--;
    }


    do {
      p.token = {};

      const thisTkClass = parser(p, state !== States.Binary);
      token = p.token;
      if (thisTkClass === TokenClass.None) {
        break;
      }

      switch (thisTkClass) {
        case TokenClass.Value:

          if (state === States.Binary) {
            err(p, '', token);
          } else if (state === States.NoUnary && stack[stackLast].tkClass === TokenClass.Unary
            && (stackLast === 0 || stack[stackLast - 1].tkClass !== TokenClass.Value)) {
            state = States.IdAndUnary;
            op = pop();
            _calcUnary(p, op, token);
          }

          state = States.Binary;
          push();
          calcStackRight();
          break;

        case TokenClass.Function:
          token.funcParams = [];
        // flows to TokenClass.ParamOpen
        case TokenClass.ParamOpen:
          if (state === States.Binary) { err(p, '', token); }
          push();
          startPoint = stackLast + 1;
          startPoints.push(startPoint);
          state = States.IdAndUnary;
          break;

        case TokenClass.Comma:
        case TokenClass.ParamClose:

          if (!startPoint) {
            err(p, `Missing starting parenthesis`, token);
          }

          const funcToken = stack[startPoint - 1];
          const isTokenComma = thisTkClass === TokenClass.Comma;
          const isFunc = funcToken.tkClass === TokenClass.Function;

          if (isTokenComma && !isFunc) {
            err(p, `Missing function`, token);
          }

          if (isFunc && !isTokenComma) {

            // function code
            if (startPoint !== stackLast + 1) { // in case there are 0 parameters
              onCloseParamOrFunc();
              funcToken.funcParams.push(token);
            }

            token = _execExprFunction(p, funcToken);

          } else {

            // not a function
            onCloseParamOrFunc();
          }

          if (!isTokenComma) {
            stack[stackLast] = token;
            startPoints.pop();
            startPoint = startPoints[startPoints.length - 1] || 0;
            state = States.Binary;
          } else {
            funcToken.funcParams.push(token);
            state = States.IdAndUnary;
          }
          break;

        case TokenClass.Unary:
          if (state === States.IdAndUnary) {
            state = States.NoUnary;
            push();
            break;
          }
        // it flows to TokenClass.Binary
        case TokenClass.Binary:
          if (state !== States.Binary) {
            err(p, '', token);
          }
          if (stackLast > 0 && stack[stackLast].tkClass === TokenClass.Value) {
            op = stack[stackLast - 1];
            if (op.canBinOp && _comparePriority(op, token)) {
              calcStackLeft();
            }
          }
          state = States.NoUnary;
          push();
          break;
      }
    } while (true);
    calcStackLeft();

    // #debug-start
    if (p.args.isVerbose) {
      token = stack.length > 0 ? stack[0] : { paType: ExFuncParamType.String };
      p.args.story.logFrmt('expression', [
        ['expression', p.expr],
        ['value', token.paType === ExFuncParamType.String ? token.sValue : token.numValue],
        ['stack.length', stack.length],
        ['stack', JSON.stringify(stack, undefined, 2)]]);
    }
    // #debug-end


    if (stack.length !== 1) {
      err(p, `Stack not empty`);
    }

    token = stack[0];
    if (stack[stackLast].tkClass !== TokenClass.Value) {
      err(p, 'Not a value');
    }

    return token.paType === ExFuncParamType.String ? token.sValue : token.numValue;
  }

  // ------------------------------------------------------------------------
  //                               Error Handling
  // ------------------------------------------------------------------------

  /** Throws a localized error */
  function err(p: ParseParams, msg?: string, value?: Token): void {
    throwI8n(Msgs.ExpHasErrors, { e: p.expr, err: msg || '' });
  }


  /**
   * Checks if the function parameter count matches the parameters expected,
   * and if their types match the expected.
   */
  function _checkFuncParams(req: ParseParams, paramCount: uint,
    paramTypes?: ExFuncParamType[]): void {

    const params = req.token.funcParams;
    if (paramCount >= 0 && params.length !== paramCount) {
      err(req, i8nMsg(Msgs.WrongNrParams, { p: req.token.sValue }));
    }

    if (paramTypes) {
      paramTypes.forEach((paramType, index) => {
        const pi = params[index];
        if (!pi || (pi.paType !== paramType && paramType !== ExFuncParamType.Any)) {
          err(req, i8nMsg(Msgs.WrongParamType, { p: req.token.sValue, i: index }));
        }
      });
    }
  }

  // ------------------------------------------------------------------------
  //                               Tools
  // ------------------------------------------------------------------------

  /** Compares the operators priority. */
  function _comparePriority(op1: Token, op2: Token) {
    return opPriority[op1.tkType] >= opPriority[op2.tkType];
  }

  // ------------------------------------------------------------------------
  //                               Compute
  // ------------------------------------------------------------------------

  /** Computes the unary operators. */
  function _calcUnary(p: ParseParams, op: Token, value: Token) {
    if (value.paType !== ExFuncParamType.Number) {
      err(p, Msgs.UnaryErr, op);
    }

    if (op.tkType === TokenType.Minus) {
      value.numValue = -value.numValue;
    }
  }


  /** Computes the binary operators. */
  function _calcBinary(p: ParseParams, op: Token, value1: Token, value2: Token) {

    const AnyNotNumber = value1.paType !== ExFuncParamType.Number
      || value2.paType !== ExFuncParamType.Number;
    if (op.tkType !== TokenType.Plus && AnyNotNumber) {
      err(p, '', value1); // @TODO: Find a message for this error
    }

    let v: number;
    switch (op.tkType) {
      case TokenType.Plus:
        if (AnyNotNumber) {
          value1.sValue =
            (value1.paType === ExFuncParamType.Number
              ? value1.numValue.toString() : value1.sValue)
            + (value2.paType === ExFuncParamType.Number
              ? value2.numValue.toString() : value2.sValue);
          value1.paType = ExFuncParamType.String;
          return;
        } else {
          v = value1.numValue + value2.numValue;
        }
        break;
      case TokenType.Minus:
        v = value1.numValue - value2.numValue;
        break;
      case TokenType.Multiply:
        v = value1.numValue * value2.numValue;
        break;
      case TokenType.Divide:
        v = value1.numValue / value2.numValue;
        break;
      case TokenType.Mod:
        v = value1.numValue % value2.numValue;
        break;
      case TokenType.Equal:
        v = value1.numValue === value2.numValue ? 1 : 0;
        break;
      case TokenType.Different:
        v = value1.numValue !== value2.numValue ? 1 : 0;
        break;
      case TokenType.Lesser:
        v = value1.numValue < value2.numValue ? 1 : 0;
        break;
      case TokenType.Greater:
        v = value1.numValue > value2.numValue ? 1 : 0;
        break;
      case TokenType.LessEqual:
        v = value1.numValue <= value2.numValue ? 1 : 0;
        break;
      case TokenType.GreaterEqual:
        v = value1.numValue >= value2.numValue ? 1 : 0;
        break;

    }
    value1.numValue = v;
  }

  // ------------------------------------------------------------------------
  //                               User Functions
  // ------------------------------------------------------------------------

  /** Computes an expression. */
  export function _computeExpression(expr: string, args: ABeamerArgs): ExprResult {

    return _stateMachine({
      args,
      checkParams: _checkFuncParams,
      expr,
      pos: 1,
    });
  }


  /**
   * If it's an expression, it computes its value.
   * @WARN: This function will be renamed soon, to be consistent with other names.
   * After renaming, it will be made public by removing the '_'.
   */
  export function _computeIfExpression(expr: string,
    args: ABeamerArgs): ExprResult | undefined {

    return isExpression(expr) ? _computeExpression(expr, args) : undefined;
  }


  /**
   * If it's an expression, it computes its value and returns its numerical value.
   * @WARN: This function will be renamed soon, to be consistent with other names.
   * After renaming, it will be made public by removing the '_'.
   */
  export function _computeIfNumExpression(expr: string, defNumber: number,
    args: ABeamerArgs): number {

    if (!isExpression(expr)) { return defNumber; }

    const exprValue = _computeExpression(expr, args);
    return exprValue !== undefined ? parseFloat(exprValue as string) : defNumber;
  }


  /**
   * Checks if it's an expression, if it is, it computes and returns
   * the value as a number. Otherwise, returns the parameter as a number.
   */
  export function ExprOrNumToNum(param: string | number,
    defValue: number, args: ABeamerArgs) {

    return _computeIfNumExpression(param as string,
      param !== undefined ? param as number : defValue, args);
  }
}
